/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package examples;

import model.NewThread;
import model.SerialMesage;
import arduino.Arduino;
import arduino.PortDropdownMenu;
import com.formdev.flatlaf.IntelliJTheme;
import com.formdev.flatlaf.intellijthemes.FlatArcOrangeIJTheme;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.SerialMesageIdComparator;

/**
 *
 * @author drzam
 */
public class SerialTerminal extends javax.swing.JFrame {

    /**
     * Creates new form SerialTerminal
     */
    public SerialTerminal() {
        initComponents();
        portList.refreshMenu();

        lista = new ArrayList();
        sprawdzone = new int[4];
        sprawdzone[0] = 0;
        sprawdzone[1] = 0;
        sprawdzone[2] = 0;
        sprawdzone[3] = 0;

        aktualizatorListy = new NewThread(400);
        odbieraczKomunikatow = new NewThread(10);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        btnRefresh = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        czysc = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        btnWyslij = new javax.swing.JButton();
        portList = new arduino.PortDropdownMenu();

        this.setJMenuBar(jMenuBar1);

        jMenu1.setText("Terminal");

        jCheckBoxMenuItem1.setText("Show timestamp");
        jCheckBoxMenuItem1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxMenuItem1StateChanged(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuItem1.setText("Export data");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arduino serial gui");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(loadImageIcon());
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(500, 600));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jList1.setCellRenderer(new SerialMesageRenderer());
        jScrollPane1.setViewportView(jList1);

        czysc.setText("Clear");
        czysc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                czyscActionPerformed(evt);
            }
        });

        textField.setEnabled(false);
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyPressed(evt);
            }
        });

        btnWyslij.setText("Send");
        btnWyslij.setEnabled(false);
        btnWyslij.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWyslijActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(czysc))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWyslij)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(connectButton)
                    .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWyslij))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(czysc)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        portList.refreshMenu();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (connectButton.getText().equals("Connect")) {
            arduino = new Arduino(portList.getSelectedItem().toString(), 115200);
            if (arduino.openConnection()) {
                connectButton.setText("Disconnect");
                portList.setEnabled(false);
                btnRefresh.setEnabled(false);
                btnWyslij.setEnabled(true);
                textField.setEnabled(true);
                odbieraczKomunikatow = new NewThread(0) {
                    @Override
                    public void work() {
                        lista = arduino.serialRead(lista);
                    }
                };
                odbieraczKomunikatow.setName("Odbieracz");
                odbieraczKomunikatow.start();
                aktualizatorListy = new NewThread(50) {
                    @Override
                    public void work() {
                        ArrayList<SerialMesage> unixe = new ArrayList<>();
                        ArrayList<Integer> zawiera = new ArrayList<>();

                        for (int i = lista.size(); i-- > 0;) {
                            SerialMesage tmp = lista.get(i);
                            if(!zawiera.contains(tmp.getFrameId())){
                                zawiera.add(tmp.getFrameId());
                                unixe.add(tmp);
                            }
                        }

                        unixe.sort(new SerialMesageIdComparator());
                        Object[] serialMesageList = unixe.toArray();
                        jList1.setModel(new AbstractListModel<SerialMesage>() {
                            @Override
                            public int getSize() {
                                return serialMesageList.length;
                            }

                            @Override
                            public SerialMesage getElementAt(int i) {
                                return (SerialMesage) serialMesageList[i];
                            }

                        });

                    }
                };
                aktualizatorListy.setName("Aktualizator");
                aktualizatorListy.start();
            }
        } else {
            odbieraczKomunikatow.setPentla(false);
            aktualizatorListy.setPentla(false);
            connectButton.setText("Connect");
            portList.setEnabled(true);
            btnRefresh.setEnabled(true);
            btnWyslij.setEnabled(false);
            textField.setEnabled(false);
            arduino.closeConnection();

        }

    }//GEN-LAST:event_connectButtonActionPerformed

    private void czyscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_czyscActionPerformed
        lista.clear();
    }//GEN-LAST:event_czyscActionPerformed

    private void btnWyslijActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWyslijActionPerformed
        String tekst = textField.getText();
        textField.setText("");
        lista.add(new SerialMesage(true, tekst));
        arduino.serialWrite(tekst + "\n");
    }//GEN-LAST:event_btnWyslijActionPerformed

    private void textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            String tekst = textField.getText();
            textField.setText("");
            lista.add(new SerialMesage(true, tekst));
            arduino.serialWrite(tekst + "\n");
        }
    }//GEN-LAST:event_textFieldKeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser(new File(System.getProperty("user.home") + "\\Desktop"));
        fc.setSelectedFile(new File("SerialLog.txt"));
        FileNameExtensionFilter filtr = new FileNameExtensionFilter("TXT", "txt");
        fc.setFileFilter(filtr);

        int returnVal = fc.showSaveDialog(SerialTerminal.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                FileWriter fileWriter = new FileWriter(file);
                try ( PrintWriter printWriter = new PrintWriter(fileWriter)) {
                    for (SerialMesage serialMesage : lista) {
                        printWriter.println(serialMesage.toString());
                    }
                    printWriter.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(SerialTerminal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1StateChanged
        ((SerialMesageRenderer) jList1.getCellRenderer()).withDate = jCheckBoxMenuItem1.getState();
        jList1.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItem1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            javax.swing.UIManager.setLookAndFeel(new FlatArcOrangeIJTheme());
        } catch (UnsupportedLookAndFeelException e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SerialTerminal().setVisible(true);
            }
        });
    }

    public JList<SerialMesage> getjList1() {
        return jList1;
    }

    public void setjList1(JList<SerialMesage> jList1) {
        this.jList1 = jList1;
    }

    private Image loadImageIcon() {
        String path = "/resources/icon.png";
        URL imgURL = getClass().getResource(path);

        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            return null;
        }
    }

    private int[] sprawdzone;
    private ArrayList<SerialMesage> lista;
    private Arduino arduino;
    private NewThread odbieraczKomunikatow;
    private NewThread aktualizatorListy;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnWyslij;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton czysc;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JList<SerialMesage> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private arduino.PortDropdownMenu portList;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
