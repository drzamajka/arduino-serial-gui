/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package examples;

import arduino.Arduino;
import arduino.PortDropdownMenu;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author drzam
 */
public class SerialTerminal extends javax.swing.JFrame {

    /**
     * Creates new form SerialTerminal
     */
    public SerialTerminal() {
        initComponents();
        portList.refreshMenu();
        
        lista = new ArrayList();
        sprawdzone = new int[4];
        sprawdzone[0] = 0;
        sprawdzone[1] = 0;
        sprawdzone[2] = 0;
        sprawdzone[3] = 0;
        
        aktualizatorListy = new NewThread(600);
        odbieraczKomunikatow = new NewThread(100);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        btnOff = new javax.swing.JButton();
        btnOn = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        czysc = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        btnWyslij = new javax.swing.JButton();
        portList = new arduino.PortDropdownMenu();

        jMenu1.setText("File");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arduino serial gui");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(500, 600));
        setPreferredSize(new java.awt.Dimension(500, 600));

        btnOff.setText("btnOff");
        btnOff.setEnabled(false);
        btnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffActionPerformed(evt);
            }
        });

        btnOn.setText("btnOn");
        btnOn.setEnabled(false);
        btnOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnActionPerformed(evt);
            }
        });

        btnRefresh.setText("Odśwież");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        czysc.setText("Wyczyść");
        czysc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                czyscActionPerformed(evt);
            }
        });

        textField.setEnabled(false);
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyPressed(evt);
            }
        });

        btnWyslij.setText("Wyślij");
        btnWyslij.setEnabled(false);
        btnWyslij.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWyslijActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(btnOn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOff))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(czysc))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWyslij)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(connectButton)
                    .addComponent(btnOn)
                    .addComponent(btnOff)
                    .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWyslij))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(czysc)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnActionPerformed
        
    }//GEN-LAST:event_btnOnActionPerformed

    private void btnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffActionPerformed
        
    }//GEN-LAST:event_btnOffActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        portList.refreshMenu();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if(connectButton.getText().equals("Connect")){
				 arduino = new Arduino(portList.getSelectedItem().toString(),115200);
				 if(arduino.openConnection()){
					 connectButton.setText("Disconnect");
					 portList.setEnabled(false);
					 //btnOn.setEnabled(true);
					 //btnOff.setEnabled(true);
					 btnRefresh.setEnabled(false);
                                         btnWyslij.setEnabled(true);
                                         textField.setEnabled(true);
                                        odbieraczKomunikatow = new NewThread(100){
                                            @Override
                                            public void work(){
                                                int size = lista.size();
                                                lista = arduino.serialRead(lista);
                                            }
                                        };
                                        odbieraczKomunikatow.setName("Odbieracz");
                                        odbieraczKomunikatow.start();  
                                        aktualizatorListy = new NewThread(400){
                                            @Override
                                            public void work(){
                                                Object[] strings = lista.toArray();
                                                jList1.setModel(new javax.swing.AbstractListModel<String>() {
                                                    @Override
                                                    public int getSize() { return strings.length; }
                                                    @Override
                                                    public String getElementAt(int i) { return strings[strings.length-1-i]+""; }
                                                });

                                            }
                                        };
                                        aktualizatorListy.setName("Aktualizator");
                                        aktualizatorListy.start();
				 }
				}
				else {
                                        odbieraczKomunikatow.setPentla(false);
                                        aktualizatorListy.setPentla(false);
					connectButton.setText("Connect");
					portList.setEnabled(true);
					//btnOn.setEnabled(false);
					btnRefresh.setEnabled(true);
					//btnOff.setEnabled(false);
                                        btnWyslij.setEnabled(false);
                                        textField.setEnabled(false);
                                        arduino.closeConnection();
                                        
				}

    }//GEN-LAST:event_connectButtonActionPerformed

    private void czyscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_czyscActionPerformed
        lista.clear();
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            @Override
            public int getSize() { return 0; }
            @Override
            public String getElementAt(int i) { return "";}
        });
    }//GEN-LAST:event_czyscActionPerformed

    private void btnWyslijActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWyslijActionPerformed
        String tekst = textField.getText();
        textField.setText("");
        lista.add(">>: "+tekst);
        arduino.serialWrite(tekst+"\n");
    }//GEN-LAST:event_btnWyslijActionPerformed

    private void textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyPressed
        if(evt.getKeyCode() == 10){
            String tekst = textField.getText();
            textField.setText("");
            lista.add(">>: "+tekst);
            arduino.serialWrite(tekst+"\n");
        }
    }//GEN-LAST:event_textFieldKeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SerialTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SerialTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SerialTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SerialTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SerialTerminal().setVisible(true);
            }
        });
    }
    

    public JList<String> getjList1() {
        return jList1;
    }

    public void setjList1(JList<String> jList1) {
        this.jList1 = jList1;
    }
    
    

    private int[] sprawdzone;
    private ArrayList<String> lista;
    private Arduino arduino;
    private NewThread odbieraczKomunikatow;
    private NewThread aktualizatorListy;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOff;
    private javax.swing.JButton btnOn;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnWyslij;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton czysc;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private arduino.PortDropdownMenu portList;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
